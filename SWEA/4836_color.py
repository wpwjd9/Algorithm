'''
인덱스가 있는 10x10 격자에 빨간색과 파란색을 칠하려고 한다.
N개의 영역에 대해 왼쪽 위와 오른쪽 아래 모서리 인덱스, 칠할 색상이 주어질 때, 칠이 끝난 후 색이 겹쳐 보라색이 된 칸 수를 구하는 프로그램을 만드시오.

주어진 정보에서 같은 색인 영역은 겹치지 않는다.

첫 줄에 테스트 케이스 개수 T가 주어진다.   ( 1 ≤ T ≤ 50 )

다음 줄부터 테스트케이스의 첫 줄에 칠할 영역의 개수 N이 주어진다. ( 2 ≤ N ≤ 30 )

다음 줄에 왼쪽 위 모서리 인덱스 r1, c1, 오른쪽 아래 모서리 r2, c2와 색상 정보 color가 주어진다. ( 0 ≤ r1, c1, r2, c2 ≤ 9 )

color = 1 (빨강), color = 2 (파랑)

3
2
2 2 4 4 1
3 3 6 6 2
3
1 2 3 3 1
3 6 6 8 1
2 3 5 6 2
3
1 4 8 5 1
1 8 3 9 1
3 2 5 8 2
'''

T = int(input())
for t in range(1, T + 1):
    canvas = [[0] * 10 for _ in range(10)]              # 색칠된 범위를 기록하는 10x10 행렬 canvas
    n = int(input())                                    # 칠할 영역의 개수 n을 입력받는다.
    for x in range(n):                                  # 영역별 정보를 입력받는다.
        # 왼쪽 위 인덱스의 x좌표, y좌표, 오른쪽 아래 모서리 인덱스의 x좌표, y좌표, 칠해야할 색 코드 순으로 리스트에 저장한다.
        info = list(map(int, input().split()))
        for i in range(info[0], info[2] + 1):           # x 좌표의 이동만큼 반복
            for j in range(info[1], info[3] + 1):       # y 좌표의 이동만큼 반복
                canvas[i][j] += info[4]                 # 해당 좌표에 색 코드의 값만큼을 더해준다.

    p_count = 0                                         # 겹친 부분을 세기 위한 p_count
    for r in range(10):                                 # 캔버스 전체를 탐색한다.
        for c in range(10):
            if canvas[r][c] == 3:                       # 값이 3인 경우에만 p_count를 1늘려준다.
                p_count += 1
    print(f'#{t} {p_count}')